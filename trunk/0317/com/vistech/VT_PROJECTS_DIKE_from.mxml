<?xml version="1.0" encoding="utf-8"?>
<!--
   这个控件提供了对数据库表 ST_STBPRP_B 内单条数据的修改界面,
   包括修改和新建
 ST_STBPRP_B是测站基本属性表奥,其他遥测站如 河道水文站 水库水文站 气象站 都与这张表做一一映射
   这个控件一般要和其他的页面修改控件结合起来,比如说被放置在一个 TAB 页面中
   这个功能预计要与 GOOGLE MAP 结合
 @Copyright www.vistech.com.cn
 @author wxf
 @version 2010-01-19
 @see config.xml,提供后台的路径
 @see SL323—2005,ICS 35.040,L 71,实时雨水情数据库表结构与标识符标准,介绍 ST_STBPRP_B 的由来
 @see app.php,默认的后台路径,唯一的,可以通过 controller action 等参数调用各种功能,大多数返回的数据是 XML 格式
-->
<FlowContainer xmlns="flexlib.containers.*"
               xmlns:mx="http://www.adobe.com/2006/mxml"
               width="100%"
               height="100%">
    <mx:Script>
        <![CDATA[
        	import mx.managers.CursorManager;
            import mx.events.CloseEvent;
            import com.vistech.SuperPanel;
            import mx.core.Application;
            import mx.controls.DateField;
            import mx.messaging.AbstractConsumer;
            import mx.controls.ComboBox;
            import mx.controls.ComboBase;
            import mx.collections.ArrayCollection;
            import mx.rpc.events.FaultEvent;
            import mx.controls.Alert;
            import mx.controls.TextInput;
            import mx.containers.FormItem;
            import mx.containers.Form;
            import mx.rpc.AsyncToken;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.http.HTTPService;

            //默认的后台文件路径,可以通过 app.php?controller=c1&action=a2调用不同数据
            private var appURL:String="http://localhost:8001/app/app.php";

            /**
             * 向表单传递一个哈希表,给表单赋值并显示,并返回一个哈希表
             *
             * 如果在赋值过程中的任何一个元素出了错误,则取消赋值,并返回错误的键值
             * 如果提供的键对比 ST_STBPRP_B 的属性多,可以标注,并返回多余的键值
             * 在返回值中,有一对键值能够表示这次赋值的成果与否: isSuccess:Boolen
             * @param data 一个哈希表,键值严格参照 ST_STBPRP_B 的数据库结构
             * @return result 一个哈希表
             * */
            public function setFormValue(data:Dictionary):Dictionary
            {
				for (var key:String in data) {
					if(data[key]==""||data[key]==null)continue;
					(getChildByName(key) as TextInput).text = data[key];

	 				delete data[key];
				}
				return data; 
            }

            /**
             * 获得这个表单的值
             *
             * 会先判断表单中每个元素的合法性,如果全部合法,则只返回 {isSuccess:true}
             * 如果有不合法的数据输入,则返回不合法的元素键值
             * @return result 一个哈希表
             * */
            public function getFormValue():Dictionary
            {            	
                var result:Dictionary=new Dictionary();
                for (var i:int=1; i < getChildren().length; i+=2)
                {
					result[(getChildAt(i) as TextInput).name]=(getChildAt(i) as TextInput).text;
                }
                result['isSuccess']=true;
                return result; //TODO 还没有实现 键值判断 		
            }

            /**
             * 保存表单数据,可以是 新建 和 修改 操作
             *
             * 根据getFormValue得到的值保存
             * 向后台通信,通信过程中,让控件左下角的 状态 只表示为 保存中
             * 如果通信失败:网络问题,则弹出错误框
             * 如果通信成果,则直接返回后台返回的数据
             * */
            public function saveFormValue():void
            {
                var data:Dictionary=this.getFormValue();
                delete data['isSuccess'];
                
                var httpservice:HTTPService=new HTTPService();
                httpservice.url=appURL + "?controller=vt_projects_dike&action=save";
                httpservice.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void
                    {
                    //TODO 直接输出后台返回值
                    });
                httpservice.addEventListener(FaultEvent.FAULT, function(event:FaultEvent):void
                    {
                        Alert.show("无法连接到服务器");
                    });
                httpservice.request=data as Object;
                httpservice.method="POST";
                httpservice.send();
            }

            /**
             * 从后台读取数据并显示到表单
             *
             * 规定: action=read 只返回一条记录
             * */
            public function readFormValue(stcd:String):void
            {
            	cursorManager.setBusyCursor();
                var data:Dictionary=new Dictionary();
                var httpservice:HTTPService=new HTTPService();
                httpservice.url=appURL + "?controller=vt_projects_dike&action=read";
                httpservice.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void
                    {
                        if (event.result.vt_projects_dike)
                        {
                            for (var key:String in(event.result.vt_projects_dike.valueOf()))
                            {
                                data[key]=event.result.vt_projects_dike[key];
                            }
                            setFormValue(data);
                            cursorManager.removeBusyCursor();
                        }
                        else
                        {
                            Alert.show("没有数据返回");
                            cursorManager.removeBusyCursor();
                        }
                    });
                httpservice.addEventListener(FaultEvent.FAULT, function(event:FaultEvent):void
                    {
                        Alert.show("无法连接到服务器");
                        cursorManager.removeBusyCursor();
                    });
                httpservice.request={id: stcd};
                httpservice.method="POST";
                httpservice.send();
            }
            
            /**
             * 设置 appURL 的路径,通过 appURL ,实现与后台通信.这样,即便主文件(swf文件)与后台文件不在一个目录下,只要通过配置文件config.xml
             * 程序仍然可以运行
             * 比如用户将 swf 文件下载到了本地文件夹,仍然可以实现访问
             * config.xml 的数据,一般在 application 初始化时向后台一次性读到用户浏览器的内存中
             * */
            public function setAppURL(path:String):void{
            	this.appURL = path;
            }
        ]]>
    </mx:Script>
	<mx:Label width="100" text="编号"/><mx:TextInput width="150" name="id"/>
	<mx:Label width="100" text="堤防(段)名称"/><mx:TextInput width="150" name="name"/>
	<mx:Label width="100" text="值班电话"/><mx:TextInput width="150" name="phone"/>
	<mx:Label width="100" text="岸别"/><mx:TextInput width="150" name="side"/>
	<mx:Label width="100" text="防洪闸座数"/><mx:TextInput width="150" name="num_gate"/>
	<mx:Label width="100" text="险段情况"/><mx:TextInput width="150" name="emergency"/>
	<mx:Label width="100" text="除险加固情况"/><mx:TextInput width="150" name="enhanced"/>
	<mx:Label width="100" text="地震基本烈度"/><mx:TextInput width="150" name="level_earthquake"/>
	<mx:Label width="100" text="情况介绍"/><mx:TextInput width="150" name="remark"/>
	<mx:Label width="100" text="管理单位名称"/><mx:TextInput width="150" name="manager"/>
	<mx:Label width="100" text="所在河流"/><mx:TextInput width="150" name="river"/>
	<mx:Label width="100" text="堤防级别"/><mx:TextInput width="150" name="level"/>
	<mx:Label width="100" text="堤防起点位置"/><mx:TextInput width="150" name="address_s"/>
	<mx:Label width="100" text="堤防终点位置"/><mx:TextInput width="150" name="address_e"/>
	<mx:Label width="100" text="堤防类型"/><mx:TextInput width="150" name="type"/>
	<mx:Label width="100" text="最大堤高(米)"/><mx:TextInput width="150" name="height_max"/>
	<mx:Label width="100" text="存在问题"/><mx:TextInput width="150" name="problems"/>
	<mx:Label width="100" text="堤防起点桩号"/><mx:TextInput width="150" name="point_s"/>
	<mx:Label width="100" text="堤防终点桩号"/><mx:TextInput width="150" name="point_e"/>
	<mx:Label width="100" text="堤防长度(公里)"/><mx:TextInput width="150" name="length"/>
	<mx:Label width="100" text="平均堤高(米)"/><mx:TextInput width="150" name="height_avg"/>
	<mx:Label width="100" text="堤顶平均宽度(米)"/><mx:TextInput width="150" name="width_avg"/>

</FlowContainer>
